from flask import Flask, request, jsonify
from werkzeug.utils import secure_filename
import os

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = '/tmp/uploads'

# Ensure upload folder exists
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Simple supported languages for demo
SUPPORTED_LANGUAGES = ['python', 'java', 'c++', 'javascript']

@app.route('/upload_code', methods=['POST'])
def upload_code():
    # Check if a file was uploaded
    if 'file' in request.files:
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        # Read file content for demo
        with open(filepath, 'r', encoding='utf-8') as f:
            code = f.read()
        language = request.form.get('language', 'unknown')
        # Here you can add auto detect language logic
        return jsonify({'status': 'success', 'language': language, 'code': code})

    # If no file, check if code pasted
    code = request.form.get('code')
    language = request.form.get('language', 'unknown')

    if not code:
        return jsonify({'error': 'No code provided'}), 400

    # Placeholder for auto detect language logic
    if language == 'auto' or language == 'unknown':
        language = auto_detect_language(code)

    return jsonify({'status': 'success', 'language': language, 'code': code})

@app.route('/generate_test_cases', methods=['POST'])
def generate_test_cases():
    data = request.json
    code = data.get('code')
    language = data.get('language')

    if not code:
        return jsonify({'error': 'Code is required'}), 400

    if language not in SUPPORTED_LANGUAGES:
        return jsonify({'error': 'Unsupported language'}), 400

    # Example dummy test case generation
    test_cases = [
        {'input': '1 2', 'output': '3'},
        {'input': '5 10', 'output': '15'}
    ]

    return jsonify({'status': 'success', 'test_cases': test_cases})

def auto_detect_language(code):
    # Very naive detection by keywords - improve as needed
    if 'def ' in code:
        return 'python'
    elif '#include' in code:
        return 'c++'
    elif 'public class' in code:
        return 'java'
    elif 'function ' in code or 'console.log' in code:
        return 'javascript'
    return 'unknown'

if __name__ == '__main__':
    app.run(debug=True)
